{{!-- 

import { z } from "zod";

const TEST_MODE = process.argv.includes("--test");

function print(obj: unknown) {
  try {
    console.log(JSON.stringify(obj, null, 2));
  } catch {
    console.log(String(obj));
  }
}

function sampleFromSchema(schema: any) {
  if (!schema || schema.type !== "object") return {};
  
  const out: any = {};
  const props = schema.properties || {};
  
  for (const key of Object.keys(props)) {
    const def = props[key] || {};
    switch (def.type) {
      case "number":
      case "integer":
        out[key] = 42;
        break;
      case "boolean":
        out[key] = true;
        break;
      case "string":
        out[key] = "example";
        break;
      case "array":
        out[key] = [];
        break;
      case "object":
        out[key] = {};
        break;
      default:
        out[key] = null;
    }
  }
  return out;
}

if (TEST_MODE) {
  console.log("ðŸ§ª Test mode for {{name}} v{{version}}");
  
{{#each tools}}
  console.log("\n--- Tool: {{name}} ---");
  console.log("Description: {{description}}");
  
  const sampleInput = sampleFromSchema({{{json inputSchema}}});
  console.log("Sample input:");
  print(sampleInput);
  
  console.log("Expected output schema:");
  print({{{json outputSchema}}});
{{/each}}

  process.exit(0);
}

// MCP Server
const { Server } = await import("@modelcontextprotocol/sdk/server/index.js");
const { StdioServerTransport } = await import("@modelcontextprotocol/sdk/server/stdio.js");

const server = new Server(
  {
    name: "{{name}}",
    version: "{{version}}"
  },
  {
    capabilities: { tools: {} }
  }
);

server.setRequestHandler("tools/list", async () => {
  return {
    tools: [
{{#each tools}}
      {
        name: "{{name}}",
        description: "{{description}}",
        inputSchema: {{{json inputSchema}}}
      }{{#unless @last}},{{/unless}}
{{/each}}
    ]
  };
});

server.setRequestHandler("tools/call", async (request) => {
  const { name, arguments: args } = request.params;
  
{{#each tools}}
  if (name === "{{name}}") {
    // Auto-detect calculator functionality
    if (args.hasOwnProperty('number1') && args.hasOwnProperty('number2')) {
      const num1 = Number(args.number1) || 0;
      const num2 = Number(args.number2) || 0;
      
      return {
        content: [{
          type: "text",
          text: JSON.stringify({
            sum: num1 + num2,
            difference: num1 - num2,
            product: num1 * num2,
            quotient: num2 !== 0 ? num1 / num2 : null
          }, null, 2)
        }]
      };
    }
    
    // Generic fallback
    return {
      content: [{
        type: "text",
        text: JSON.stringify({
{{#each outputSchema.properties}}
          "{{@key}}": null{{#unless @last}},{{/unless}}
{{/each}}
        }, null, 2)
      }]
    };
  }
{{/each}}

  throw new Error(`Unknown tool: ${name}`);
});

async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("{{name}} MCP Server running");
}

main().catch(console.error); --}}
const TEST_MODE = process.argv.includes("--test");

function print(obj: unknown) {
  try {
    console.log(JSON.stringify(obj, null, 2));
  } catch {
    console.log(String(obj));
  }
}

function sampleFromSchema(schema: any) {
  if (!schema || schema.type !== "object") return {};
  
  const out: any = {};
  const props = schema.properties || {};
  
  for (const key of Object.keys(props)) {
    const def = props[key] || {};
    switch (def.type) {
      case "number":
      case "integer":
        out[key] = 42;
        break;
      case "boolean":
        out[key] = true;
        break;
      case "string":
        out[key] = "example";
        break;
      case "array":
        out[key] = [];
        break;
      case "object":
        out[key] = {};
        break;
      default:
        out[key] = null;
    }
  }
  return out;
}

if (TEST_MODE) {
  console.log("ðŸ§ª Test mode for {{name}} v{{version}}");
  
{{#each tools}}
  console.log("\n--- Tool: {{name}} ---");
  console.log("Description: {{description}}");
  
  const sampleInput = sampleFromSchema({{{json inputSchema}}});
  console.log("Sample input:");
  print(sampleInput);
  
  console.log("Expected output schema:");
  print({{{json outputSchema}}});
{{/each}}

  process.exit(0);
}

// MCP Server
const { Server } = await import("@modelcontextprotocol/sdk/server/index.js");
const { StdioServerTransport } = await import("@modelcontextprotocol/sdk/server/stdio.js");

const server = new Server(
  {
    name: "{{name}}",
    version: "{{version}}"
  },
  {
    capabilities: { tools: {} }
  }
);

server.setRequestHandler("tools/list", async () => {
  return {
    tools: [
{{#each tools}}
      {
        name: "{{name}}",
        description: "{{description}}",
        inputSchema: {{{json inputSchema}}}
      }{{#unless @last}},{{/unless}}
{{/each}}
    ]
  };
});

server.setRequestHandler("tools/call", async (request) => {
  const { name, arguments: args } = request.params;
  
{{#each tools}}
  if (name === "{{name}}") {
    // For now, return dummy output matching schema
    return {
      content: [{
        type: "text",
        text: JSON.stringify({
{{#each outputSchema.properties}}
          "{{@key}}": null{{#unless @last}},{{/unless}}
{{/each}}
        }, null, 2)
      }]
    };
  }
{{/each}}

  throw new Error(`Unknown tool: ${name}`);
});

async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("{{name}} MCP Server running");
}

main().catch(console.error);
